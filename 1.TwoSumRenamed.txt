Naive Approach:
........................................................................................
vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> ans;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if((nums[i]+nums[j])==target)
                {
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        return ans;
    }



Efficient Approach :
........................................................................................
vector<int> twoSum(vector<int>& nums, int target)
    {
        vector<int> ans;
        bool flag=false;
        for(int i=0;i<nums.size()-1;i++)
        {
            int sum=target-nums[i];
            for(int j=0;j<nums.size();j++)
            {
                if(i!=j)
                {
                    if((sum-nums[j])==0)
                    {
                        flag=true;
                        ans.push_back(i);
                        ans.push_back(j);
                        break;
                    }
                }
            }
            if(flag)
            {
                break;
            }
            sum=target;
        }
        return ans;
    }
.............................................................................................

More efficient approach:

 vector<int> twoSum(vector<int>& nums, int target)
    {
        vector<int> ans;
        unordered_map<int,int> mp;
      
        for(int i=0;i<nums.size();i++)
        {
            int com=target-nums[i];
            if(mp.find(com) != mp.end())
            {
                
                ans.push_back(i);
                ans.push_back(mp[com]);
                return ans;
            }
            else
            {
                mp.insert({nums[i],i});
            }
        }
        return ans;
    }














